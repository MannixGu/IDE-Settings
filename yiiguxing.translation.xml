<application>
  <component name="AppStorage">
    <histories>
      <item value="Calibration Listener" />
      <item value="constrain Translation" />
      <item value="magnifier View" />
      <item value="GRAPHIC THICKNESS" />
      <item value="$Switch Map$com$touptek$toupview$Tp Const$GRAPHIC THICKNESS" />
      <item value="btn calib" />
      <item value="btn capture" />
      <item value="set Magnifier Show" />
      <item value="coordinates" />
      <item value="Mock version of the SurfaceView. * Only non override public methods from the real SurfaceView have been added in there. * Methods that take an unknown class as parameter or as return object, have been removed for now." />
      <item value="the fling velocity on the X axis" />
      <item value="Gesture Detector" />
      <item value="on Fling" />
      <item value="compress Quality" />
      <item value="compress Quanity" />
      <item value="compress Qutity" />
      <item value="cancel Potential Work" />
      <item value="The traditional location for pictures and videos when mounting the * device as a camera. Note that this is primarily a convention for the * top-level public directory, as this convention makes no sense elsewhere." />
      <item value="mounted" />
      <item value="Resolver" />
      <item value="m Content Resolver" />
      <item value="load Thumbnail With Q Api" />
      <item value="Thumbnail" />
      <item value="create Image Thumbnail" />
      <item value="Removes any ID from the end of the path." />
      <item value="BUCKET DISPLAY NAME" />
      <item value="if the specified column type is blob" />
      <item value="save With Burn" />
      <item value="populate" />
      <item value="BEHAVIOR RESUME ONLY CURRENT FRAGMENT" />
      <item value="Utility to reconcile a desired size and state, with constraints imposed * by a MeasureSpec. Will take the desired size, unless a different size * is imposed by the constraints. The returned value is a compound integer, * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the * resulting size is smaller than the size the view wants to be." />
      <item value="Check against our foreground's minimum height and width" />
      <item value="Check against our minimum height and width" />
      <item value="A {@link ImageButton} which supports compatible features on older versions of the platform, * including:" />
      <item value="Nested Scrolling Child 2" />
      <item value="hide Before" />
      <item value="video" />
      <item value="btn vedio" />
      <item value="* Created by LG on 2020/9/9. * You have to run so hard to keep the place * The more stable, the more vulnerable" />
      <item value="* Returns true iff the specified rectangle r is inside or equal to this * rectangle. An empty rectangle never contains another rectangle." />
      <item value="retrievewindow" />
      <item value="retrieve" />
      <item value="retrueve" />
      <item value="view" />
      <item value="permision" />
      <item value="single Partner Count" />
      <item value="Run State Recorder" />
      <item value="* This attribute returns the text content of this node and its * descendants. When it is defined to be &lt;code&gt;null&lt;/code&gt;, setting it * has no effect. On setting, any possible children this node may have * are removed and, if it the new string is not empty or * &lt;code&gt;null&lt;/code&gt;, replaced by a single &lt;code&gt;Text&lt;/code&gt; node * containing the string this attribute is set to. * &lt;br&gt; On getting, no serialization is performed, the returned string * does not contain any markup. No whitespace normalization is performed * and the returned string does not contain the white spaces in element * content (see the attribute * &lt;code&gt;Text.isElementContentWhitespace&lt;/code&gt;). Similarly, on setting, * no parsing is performed either, the input string is taken as pure * textual content. * &lt;br&gt;The string returned is made of the text content of this node * depending on its type, as defined below: * &lt;table border='1' cellpadding='3'&gt; * &lt;tr&gt; * &lt;th&gt;Node type&lt;/th&gt; * &lt;th&gt;Content&lt;/th&gt; * &lt;/tr&gt; * &lt;tr&gt; * &lt;td valign='top' rowspan='1' colspan='1'&gt; * ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, * DOCUMENT_FRAGMENT_NODE&lt;/td&gt; * &lt;td valign='top' rowspan='1' colspan='1'&gt;concatenation of the &lt;code&gt;textContent&lt;/code&gt; * attribute value of every child node, excluding COMMENT_NODE and * PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the * node has no children.&lt;/td&gt; * &lt;/tr&gt; * &lt;tr&gt; * &lt;td valign='top' rowspan='1' colspan='1'&gt;TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE, * PROCESSING_INSTRUCTION_NODE&lt;/td&gt; * &lt;td valign='top' rowspan='1' colspan='1'&gt;&lt;code&gt;nodeValue&lt;/code&gt;&lt;/td&gt; * &lt;/tr&gt; * &lt;tr&gt; * &lt;td valign='top' rowspan='1' colspan='1'&gt;DOCUMENT_NODE, * DOCUMENT_TYPE_NODE, NOTATION_NODE&lt;/td&gt; * &lt;td valign='top' rowspan='1' colspan='1'&gt;&lt;em&gt;null&lt;/em&gt;&lt;/td&gt; * &lt;/tr&gt;" />
      <item value="descendants" />
      <item value="* Adds all of the movement samples of the specified event to this one if * it is compatible. To be compatible, the event must have the same device id, * source, action, flags, pointer count, pointer properties. * * Only applies to {@link #ACTION_MOVE} or {@link #ACTION_HOVER_MOVE} events. * * @param event The event whose movements samples should be added to this one * if possible. * @return True if batching was performed or false if batching was not possible. * @hide */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="108" />
        <entry key="ENGLISH" value="109" />
        <entry key="ARABIC" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="2" />
      </map>
    </option>
  </component>
</application>