<application>
  <component name="AppStorage">
    <histories>
      <item value="No Network Security Config specified, using platform default" />
      <item value="Restriction" />
      <item value="Restrict" />
      <item value="inspect" />
      <item value="inspection" />
      <item value="Attempts to cancel execution of this task. This attempt will * fail if the task has already completed, has already been cancelled, * or could not be cancelled for some other reason. If successful, * and this task has not started when {@code cancel} is called, * this task should never run. If the task has already started, * then the {@code mayInterruptIfRunning} parameter determines * whether the thread executing this task should be interrupted in * an attempt to stop the task. * * &lt;p&gt;After this method returns, subsequent calls to {@link #isDone} will * always return {@code true}. Subsequent calls to {@link #isCancelled} * will always return {@code true} if this method returned {@code true}. * * @param mayInterruptIfRunning {@code true} if the thread executing this * task should be interrupted; otherwise, in-progress tasks are allowed * to complete * @return {@code false} if the task could not be cancelled, * typically because it has already completed normally; * {@code true} otherwise" />
      <item value="* Attempts to cancel execution of this task. This attempt will * fail if the task has already completed, has already been cancelled, * or could not be cancelled for some other reason. If successful, * and this task has not started when {@code cancel} is called, * this task should never run. If the task has already started, * then the {@code mayInterruptIfRunning} parameter determines * whether the thread executing this task should be interrupted in * an attempt to stop the task. * * &lt;p&gt;After this method returns, subsequent calls to {@link #isDone} will * always return {@code true}. Subsequent calls to {@link #isCancelled} * will always return {@code true} if this method returned {@code true}. * * @param mayInterruptIfRunning {@code true} if the thread executing this * task should be interrupted; otherwise, in-progress tasks are allowed * to complete * @return {@code false} if the task could not be cancelled, * typically because it has already completed normally; * {@code true} otherwise" />
      <item value="* 1. If fewer than corePoolSize threads are running, try to * start a new thread with the given command as its first * task. The call to addWorker atomically checks runState and * workerCount, and so prevents false alarms that would add * threads when it shouldn't, by returning false. * * 2. If a task can be successfully queued, then we still need * to double-check whether we should have added a thread * (because existing ones died since last checking) or that * the pool shut down since entry into this method. So we * recheck state and if necessary roll back the enqueuing if * stopped, or start a new thread if there are none. * * 3. If we cannot queue task, then we try to add a new * thread. If it fails, we know we are shut down or saturated * and so reject the task." />
      <item value="* Implemented by objects that want to handle cases where a thread is being * terminated by an uncaught exception. Upon such termination, the handler * is notified of the terminating thread and causal exception. If there is * no explicit handler set then the thread's group is the default handler." />
      <item value="raw Screen Height" />
      <item value="reserved" />
      <item value="* Sets whether JavaScript running in the context of a file scheme URL * should be allowed to access content from other file scheme URLs. To * enable the most restrictive, and therefore secure policy, this setting * should be disabled. Note that the value of this setting is ignored if * the value of {@link #getAllowUniversalAccessFromFileURLs} is true. * Note too, that this setting affects only JavaScript access to file scheme * resources. Other access to such resources, for example, from image HTML * elements, is unaffected. To prevent possible violation of same domain policy * on {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH} and earlier * devices, you should explicitly set this value to {@code false}. * &lt;p&gt; * The default value is true for API level * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1} and below, * and false for API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN} * and above. *" />
      <item value="* Sets whether JavaScript running in the context of a file scheme URL * should be allowed to access content from any origin. This includes * access to content from other file scheme URLs. See * {@link #setAllowFileAccessFromFileURLs}. To enable the most restrictive, * and therefore secure policy, this setting should be disabled. * Note that this setting affects only JavaScript access to file scheme * resources. Other access to such resources, for example, from image HTML * elements, is unaffected. To prevent possible violation of same domain policy * on {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH} and earlier * devices, you should explicitly set this value to {@code false}. * &lt;p&gt; * The default value is true for API level * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1} and below, * and false for API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN} * and above." />
      <item value="* @param flag whether JavaScript running in the context of a file scheme * URL should be allowed to access content from any origin" />
      <item value="* Resumes all layout, parsing, and JavaScript timers for all WebViews. * This will resume dispatching all timers." />
      <item value="Resume" />
      <item value="web Resume" />
      <item value="* Pauses any extra processing associated with this WebView and its * associated DOM, plugins, JavaScript etc. For example, if this WebView is * taken offscreen, this could be called to reduce unnecessary CPU or * network traffic. When this WebView is again &quot;active&quot;, call onResume(). * Note that this differs from pauseTimers(), which affects all WebViews." />
      <item value="Track" />
      <item value="ss Track Click" />
      <item value="Tertiary" />
      <item value="Tertiary button (middle mouse button)" />
      <item value="/** * When {@link #FLAG_DIM_BEHIND} is set, this is the amount of dimming * to apply. Range is from 1.0 for completely opaque to 0.0 for no * dim." />
      <item value="An app can use this method to check if it is currently allowed to draw on top of other * apps. In order to be allowed to do so, an app must first declare the * {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission in its manifest. If it * is currently disallowed, it can prompt the user to grant it this capability through a * management UI by sending an Intent with action * {@link android.provider.Settings#ACTION_MANAGE_OVERLAY_PERMISSION}. * * @param context A context * @return true if the calling app can draw on top of other apps, false otherwise." />
      <item value="Drag Algorithm" />
      <item value="TYPE STEP DETECTOR" />
      <item value="add Base Pedometer Listener" />
      <item value="All flavors must now belong to a named flavor dimension." />
      <item value="Plugin Server" />
      <item value="Approve" />
      <item value="only run in root project" />
      <item value="interface" />
      <item value="String describing the technology of the current battery" />
      <item value="plugged" />
      <item value="integer containing the current battery temperature" />
      <item value="whether or not rule violations are to be displayed on the console." />
      <item value="XOR Security" />
      <item value="Byte Array Input Stream" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="37" />
        <entry key="ENGLISH" value="38" />
      </map>
    </option>
  </component>
</application>